// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowDemo.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Demo use of ScenarioContext to store simple and complex data types")]
    public partial class DemoUseOfScenarioContextToStoreSimpleAndComplexDataTypesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ScenarioContext.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Demo use of ScenarioContext to store simple and complex data types", "\tFirst scenario demonstrates the use of ScenarioContext to store and retrieve sim" +
                    "ple data as key pair\r\n\tSecond scenario uses additional ScenarioContext methods A" +
                    "dd and Get<> to store and retrieve more complex types", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Store simple data type in one step and dsiplay it in other")]
        [NUnit.Framework.CategoryAttribute("ScenarioContext")]
        [NUnit.Framework.CategoryAttribute("SimpleType")]
        public virtual void StoreSimpleDataTypeInOneStepAndDsiplayItInOther()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Store simple data type in one step and dsiplay it in other", new string[] {
                        "ScenarioContext",
                        "SimpleType"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I pass this value MyStoredValue in this step", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.Then("Display stored value in this step", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Store complex data type in one step and display it in other")]
        [NUnit.Framework.CategoryAttribute("ScenarioContext")]
        [NUnit.Framework.CategoryAttribute("ComplexType")]
        public virtual void StoreComplexDataTypeInOneStepAndDisplayItInOther()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Store complex data type in one step and display it in other", new string[] {
                        "ScenarioContext",
                        "ComplexType"});
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("I assign complex data type in this step", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.Then("Display stored values in this step", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ScenarioContext also has other properties like this title")]
        [NUnit.Framework.CategoryAttribute("ScenarioContext")]
        [NUnit.Framework.CategoryAttribute("ScenarioInfo")]
        [NUnit.Framework.CategoryAttribute("ScenarioBlock")]
        public virtual void ScenarioContextAlsoHasOtherPropertiesLikeThisTitle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ScenarioContext also has other properties like this title", new string[] {
                        "ScenarioContext",
                        "ScenarioInfo",
                        "ScenarioBlock"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("this is value of the current ScenarioInfo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.And("this is value of the current ScenarioBlock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
